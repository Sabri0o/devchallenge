[{"C:\\Users\\user\\devchallenge\\client\\src\\index.js":"1","C:\\Users\\user\\devchallenge\\client\\src\\App.js":"2","C:\\Users\\user\\devchallenge\\client\\src\\components\\navbar\\header.js":"3","C:\\Users\\user\\devchallenge\\client\\src\\dummyImages\\samples.js":"4","C:\\Users\\user\\devchallenge\\client\\src\\components\\imageCard\\imagecard.js":"5","C:\\Users\\user\\devchallenge\\client\\src\\components\\imageList\\imagelist.js":"6","C:\\Users\\user\\devchallenge\\client\\src\\components\\navbar\\upload.js":"7","C:\\Users\\user\\devchallenge\\client\\src\\components\\masonry\\masonry.js":"8"},{"size":432,"mtime":1611068521713,"results":"9","hashOfConfig":"10"},{"size":4185,"mtime":1611235481850,"results":"11","hashOfConfig":"10"},{"size":1439,"mtime":1611167279174,"results":"12","hashOfConfig":"10"},{"size":111857,"mtime":1611142267927,"results":"13","hashOfConfig":"10"},{"size":817,"mtime":1611175286213,"results":"14","hashOfConfig":"10"},{"size":361,"mtime":1611160480532,"results":"15","hashOfConfig":"10"},{"size":1371,"mtime":1611235781564,"results":"16","hashOfConfig":"10"},{"size":1948,"mtime":1611222501391,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"12b19ij",{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"C:\\Users\\user\\devchallenge\\client\\src\\index.js",[],["38","39"],"C:\\Users\\user\\devchallenge\\client\\src\\App.js",["40","41","42","43","44"],"C:\\Users\\user\\devchallenge\\client\\src\\components\\navbar\\header.js",[],["45","46"],"C:\\Users\\user\\devchallenge\\client\\src\\dummyImages\\samples.js",[],"C:\\Users\\user\\devchallenge\\client\\src\\components\\imageCard\\imagecard.js",["47","48","49"],"import React from \"react\";\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Image from 'react-bootstrap/Image';\r\n\r\n\r\nclass ImageCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {spans:0};\r\n    this.imageRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.imageRef.current.addEventListener(\"load\", this.setSpans);\r\n  }\r\n\r\n  setSpans = () => {\r\n    const height = this.imageRef.current.clientHeight;\r\n    const spans = Math.ceil(height / 10 );\r\n    this.setState({ spans: spans});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ gridRowEnd: `span ${this.state.spans}` }}>\r\n        <img ref={this.imageRef} src={this.props.image}  alt='blabla' />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageCard;\r\n","C:\\Users\\user\\devchallenge\\client\\src\\components\\imageList\\imagelist.js",[],"C:\\Users\\user\\devchallenge\\client\\src\\components\\navbar\\upload.js",["50","51"],"C:\\Users\\user\\devchallenge\\client\\src\\components\\masonry\\masonry.js",["52","53","54"],"import React from \"react\";\r\nimport './masonry.css';\r\nimport { MDBMask, MDBView, MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\r\n//import '@fortawesome/fontawesome-free/css/all.min.css';\r\n//import 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\n\r\n\r\nclass Masonry extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {columns: 1};\r\n\t\tthis.onResize = this.onResize.bind(this);\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tthis.onResize();\r\n\t\twindow.addEventListener('resize', this.onResize)\t\r\n\t}\r\n\t\r\n\tgetColumns(w){\r\n\t\treturn this.props.brakePoints.reduceRight( (p, c, i) => {\r\n\t\t\treturn c < w ? p : i;\r\n\t\t}, this.props.brakePoints.length) + 1;\r\n\t}\r\n\t\r\n\tonResize(){\r\n\t\tconst columns = this.getColumns(this.refs.Masonry.offsetWidth);\r\n\t\tif(columns !== this.state.columns){\r\n\t\t\tthis.setState({columns: columns});\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tmapChildren(){\r\n\t\tlet col = [];\r\n\t\tconst numC = this.state.columns;\r\n\t\tfor(let i = 0; i < numC; i++){\r\n\t\t\tcol.push([]);\r\n\t\t}\r\n\t\treturn this.props.children.reduce((p,c,i) => {\r\n\t\t\tp[i%numC].push(c);\r\n\t\t\treturn p;\r\n\t\t}, col);\r\n\t}\r\n\t\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"masonry\" ref=\"Masonry\">\r\n\t\t\t\t{this.mapChildren().map((col, ci) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div className=\"column\" key={ci} >\r\n\t\t\t\t\t\t\t{col.map((child, i) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n                                <div className=\"show-image\" key={i} >\r\n                                    \r\n\t\t\t\t\t\t\t\t\t<MDBView hover>\r\n              \t\t\t\t\t\t\t{child}\r\n              \t\t\t\t\t\t\t<MDBMask className=\"flex-center\" overlay=\"red-light\">\r\n\t\t\t\t\t\t\t\t\t\t  <p className=\"white-text\">Label comes here</p>\r\n              \t\t\t\t\t\t\t</MDBMask>\r\n            \t\t\t\t\t\t</MDBView>\r\n \r\n                                    <input className=\"the-buttons\" type=\"button\" value=\" delete \" />\r\n                                    </div>)\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n                 \r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Masonry;\r\n",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":5,"column":8,"nodeType":"61","messageId":"62","endLine":5,"endColumn":17},{"ruleId":"63","severity":1,"message":"64","line":108,"column":9,"nodeType":"65","endLine":108,"endColumn":19},{"ruleId":"63","severity":1,"message":"64","line":110,"column":9,"nodeType":"65","endLine":110,"endColumn":19},{"ruleId":"66","severity":1,"message":"67","line":125,"column":21,"nodeType":"68","endLine":128,"endColumn":36},{"ruleId":"66","severity":1,"message":"67","line":155,"column":4,"nodeType":"68","endLine":155,"endColumn":21},{"ruleId":"55","replacedBy":"69"},{"ruleId":"57","replacedBy":"70"},{"ruleId":"59","severity":1,"message":"71","line":2,"column":8,"nodeType":"61","messageId":"62","endLine":2,"endColumn":12},{"ruleId":"59","severity":1,"message":"72","line":3,"column":8,"nodeType":"61","messageId":"62","endLine":3,"endColumn":14},{"ruleId":"59","severity":1,"message":"73","line":4,"column":8,"nodeType":"61","messageId":"62","endLine":4,"endColumn":13},{"ruleId":"59","severity":1,"message":"74","line":4,"column":8,"nodeType":"61","messageId":"62","endLine":4,"endColumn":12},{"ruleId":"59","severity":1,"message":"75","line":5,"column":8,"nodeType":"61","messageId":"62","endLine":5,"endColumn":11},{"ruleId":"59","severity":1,"message":"76","line":3,"column":28,"nodeType":"61","messageId":"62","endLine":3,"endColumn":40},{"ruleId":"59","severity":1,"message":"77","line":3,"column":42,"nodeType":"61","messageId":"62","endLine":3,"endColumn":48},{"ruleId":"59","severity":1,"message":"78","line":3,"column":50,"nodeType":"61","messageId":"62","endLine":3,"endColumn":56},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'ImageList' is defined but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["79"],["80"],"'Card' is defined but never used.","'Button' is defined but never used.","'Image' is defined but never used.","'Form' is defined but never used.","'Row' is defined but never used.","'MDBContainer' is defined but never used.","'MDBRow' is defined but never used.","'MDBCol' is defined but never used.","no-global-assign","no-unsafe-negation"]